# -*- coding: utf-8 -*-
"""焼肉SVM_交差検証.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1zGBT--XcWcsnTF47DzvEJPckOc_Dma-N
"""

import cv2
import matplotlib.pyplot as plt
import glob
import numpy as np
from sklearn.model_selection import StratifiedKFold

path_list_ng=glob.glob("/content/drive/MyDrive/オープンハウス/yaketenai/*")
imgs_ng=[]
for path_ng in path_list_ng:
  img_ng=cv2.imread(path_ng)
  img_ng=cv2.resize(img_ng,(255,255))
  imgs_ng.append(img_ng)
imgs_ng=np.array(imgs_ng)


path_list_ok=glob.glob("/content/drive/MyDrive/オープンハウス/yaketeru/*")
imgs_ok=[]
for path_ok in path_list_ok:
  img_ok=cv2.imread(path_ok)
  img_ok=cv2.resize(img_ok,(255,255))
  imgs_ok.append(img_ok)
imgs_ok=np.array(imgs_ok)

imgs = np.concatenate((imgs_ng, imgs_ok))
labels=np.concatenate((np.zeros(len(imgs_ng)),np.ones(len(imgs_ok))),axis=0)

print(imgs.shape)
print(labels)

def get_feature_vector(imgs):
  std_list, arg_list = [], []
  for img in imgs:
    im_rgb = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)
    Red=cv2.calcHist([im_rgb],[0],None,[256],[0,256])
    for i in range(50):
      Red[i]=0
    std_list.append(np.std(Red))
    arg_list.append(np.argmax(Red))
  X = np.array([arg_list, std_list])
  X = X.T
  return X

X = get_feature_vector(imgs)
print(X)

from sklearn.svm import SVC

def train_and_test(X_train, X_test, labels_train, labels_test):
  svm_model = SVC(kernel='linear', C=1.0)
  svm_model.fit(X_train, labels_train)

  y_pred=svm_model.predict(X_test)

  accuracy=0
  for i in range(len(labels_test)):
    if labels_test[i]==y_pred[i]:
      accuracy+=1

  accuracy/=len(labels_test)
  return accuracy, svm_model

skf=StratifiedKFold(n_splits=5)

ave=0
for train_index,test_index in skf.split(X, labels):
  print("train_index:",train_index,"test_index:",test_index)
  X_train = X[train_index]
  X_test = X[test_index]
  labels_train = labels[train_index]
  labels_test = labels[test_index]
  print(labels_test)
  acc, svm_model = train_and_test(X_train, X_test, labels_train, labels_test)
  ave+=acc

print(ave/5)

"""混同行列について調べる FPが重要(焼けてないを焼けてると判定する)"""

import pickle
with open("/content/drive/MyDrive/オープンハウス/model.pickle",mode="wb") as f:
  pickle.dump(svm_model,f,protocol=2)

with open("/content/drive/MyDrive/オープンハウス/model.pickle",mode="rb") as f:
  clf=pickle.load(f)

y_pred=svm_model.predict(X)
print(y_pred)